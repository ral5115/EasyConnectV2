using EasyTools.Domains.Base;
using EasyTools.Framework.Application;
using EasyTools.Framework.Data;
using EasyTools.Framework.Persistance;
using EasyTools.Framework.Resources;
using EasyTools.Infrastructure;
using EasyTools.Infrastructure.Entities;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.ServiceModel;

namespace EasyTools.Domains
{
    public class CONSQLBLL : BaseCONSQLBLL
    {
        private CONRecordDetailBLL cONRecordDetailDl;

        private CONRecordBLL cONRecordDl;

        private CONSQLDetailBLL cONSQLDetailDl;

        private CONSQLParameterBLL cONSQLParameterDl;

        private CONSQLBLL cONSQLDl;

        private CONSQLSendBLL cONSQLSendDl;

        private CONStructureBLL cONStructureDl;

        private CONStructureDetailBLL cONStructureDetailDl;

        private CONEquivalenceDetailBLL cONEquivalenceDetailDl;

        private CONErrorBLL cONErrorDl;

        public CONSQLBLL(IUnitOfWork settings)
            : base(settings)
        {
        }

        public CONSQLBLL(DatabaseSetting settings)
            : base(settings)
        {
        }

        public void AddSelecMeDetails(CONSQL data)
        {
            data.SQLDetails = cONSQLDetailDl.FindAll(new CONSQLDetail { SQLId = data.Id }, Options.All);
            data.SQLParameters = cONSQLParameterDl.FindAll(new CONSQLParameter { SQLId = data.Id }, Options.All);
            data.ChildSQLs = cONSQLDl.FindAll(new CONSQL { MainSQLId = data.Id }, Options.All);
            if (data.ChildSQLs != null && data.ChildSQLs.Count > 0)
            {
                for (int i = 0; i < data.ChildSQLs.Count; i++)
                {
                    data.ChildSQLs[i].SQLDetails = cONSQLDetailDl.FindAll(new CONSQLDetail { SQLId = data.ChildSQLs[i].Id }, Options.All);
                }
            }
            data.SQLSends = cONSQLSendDl.FindAll(new CONSQLSend { SQLId = data.Id }, Options.All);
        }

        public override CONSQL Execute(CONSQL data, Actions action, Options option, string token)
        {
            try
            {
                if (action == Actions.Add || action == Actions.Modify || action == Actions.Remove || (action == Actions.Find && (option == Options.Me || option == Options.Exist)))
                {
                    if ((action == Actions.Add || action == Actions.Modify) && option == Options.All)
                    {
                        this.Work.IsTransactional = true;
                        this.Work.BeginTransaction();
                        cONRecordDetailDl = new CONRecordDetailBLL(Work);
                        cONRecordDl = new CONRecordBLL(Work);
                        cONSQLDetailDl = new CONSQLDetailBLL(Work);
                        cONSQLParameterDl = new CONSQLParameterBLL(Work);
                        cONSQLDl = new CONSQLBLL(Work);
                        cONSQLSendDl = new CONSQLSendBLL(Work);
                    }
                    data = base.Execute(data, action, option, token);
                    if (action == Actions.Find && option == Options.Me)
                    {
                        cONRecordDetailDl = new CONRecordDetailBLL(this.Work.Settings);
                        cONRecordDl = new CONRecordBLL(this.Work.Settings);
                        cONSQLDetailDl = new CONSQLDetailBLL(this.Work.Settings);
                        cONSQLParameterDl = new CONSQLParameterBLL(this.Work.Settings);
                        cONSQLDl = new CONSQLBLL(this.Work.Settings);
                        cONSQLSendDl = new CONSQLSendBLL(this.Work.Settings);
                        AddSelecMeDetails(data);
                    }
                    if ((action == Actions.Add || action == Actions.Modify) && option == Options.All)
                        AddDetails(data);
                    if (option == Options.All)
                        Work.Commit();
                    return data;
                }
                else if (action == Actions.Find && (option == Options.All || option == Options.Light))
                {
                    if (option == Options.All)
                        data.Entities = FindAll(data, Options.All);
                    else if (option == Options.Light)
                        data.Entities = FindAll(data, Options.Light);
                    return data;
                }
                else if (action == Actions.Process && (option == Options.All || option == Options.Light))
                {
                    data = ExecuteSQL(data);
                    return data;
                }
                else if (action == Actions.Generate && (option == Options.All || option == Options.Light))
                {
                    data.AddAditionalProperty("Result", UNOEEImport(data.Records));
                    return data;
                }
                else
                    throw new NotImplementedException(GetLocalizedMessage(Language.DLACTIONNOTIMPLEMENT, action.ToString(), option.ToString()));
            }
            catch (Exception e)
            {
                throw new BusinessException(e).GetFaultException();
            }
        }

        public CONSQL ExecuteSQL(CONSQL data)
        {
            try
            {
                cONStructureDl = new CONStructureBLL(Work.Settings);
                List<CONRecord> accountings = new List<CONRecord>();

                if (data == null)
                    AddExceptionMessage(Language.DLTABLEVALUENULL, "CONSQL", "CONSQLs");
                if (data.Entities == null)
                    AddExceptionMessage("No hay Interfaces para ejecutar.");
                if (data.SQLSends == null)
                    AddExceptionMessage("No hay Web Services seleccionado para la ejecución de las interfaces.");
                if (!HasErrors)
                {
                    for (int i = 0; i < data.Entities.Count; i++)
                    {
                        List<CONRecordDetail> accountingDetails = new List<CONRecordDetail>();
                        data.Entities[i] = Execute(new CONSQL { Id = data.Entities[i].Id }, Actions.Find, Options.Me, "");
                        data.Entities[i].Structure = cONStructureDl.Execute(new CONStructure { Id = data.Entities[i].StructureId }, Actions.Find, Options.Me, "");
                        data.Entities[i].SQLSends = data.SQLSends;
                        if (data.SQLParameters != null && data.SQLParameters.Count > 0)
                        {
                            foreach (CONSQLParameter parm in data.SQLParameters)
                            {
                                foreach (var sqlParam in data.Entities[i].SQLParameters)
                                {
                                    if (parm.Name == sqlParam.Name)
                                    {
                                        sqlParam.DateValue = parm.DateValue;
                                        sqlParam.Int32Value = parm.Int32Value;
                                        sqlParam.StringValue = parm.StringValue;
                                    }
                                }
                            }
                        }
                        accountings = GetDataQuery(data.Entities[i]);
                        if (data.Entities[i].ChildSQLs != null && data.Entities[i].ChildSQLs.Count > 0)
                        {
                            foreach (CONSQL item in data.Entities[i].ChildSQLs)
                            {
                                if (data.Entities[i].SQLParameters != null && data.Entities[i].SQLParameters.Count > 0)
                                    item.SQLParameters = data.Entities[i].SQLParameters;
                                accountingDetails.AddRange(GetDataQueryDetail(item));
                            }
                            if (accountings != null && accountings.Count > 0 && accountingDetails != null && accountingDetails.Count > 0)
                                foreach (CONRecord item in accountings)
                                    item.RecordDetails = accountingDetails.Where(t => t.LogicalKey == item.LogicalKey).ToList<CONRecordDetail>();
                        }
                        if (string.IsNullOrWhiteSpace(data.UpdatedBy))
                            data.UpdatedBy = "admin";
                        for (int k = 0; k < accountings.Count; k++)
                        {
                            cONRecordDl = new CONRecordBLL(Work.Settings);
                            cONRecordDetailDl = new CONRecordDetailBLL(Work.Settings);
                            cONErrorDl = new CONErrorBLL(Work.Settings);
                            CONRecord accounting = cONRecordDl.Execute(accountings[k], Actions.Find, Options.Me, "");
                            if (accounting == null)
                            {
                                accountings[k].UpdatedBy = data.UpdatedBy;
                                accountings[k] = cONRecordDl.Execute(accountings[k], Actions.Add, Options.All, "");
                            }
                            else
                            {
                                if (!accounting.IsSend)
                                {
                                    if (accounting.RecordDetails != null && accounting.RecordDetails.Count > 0)
                                        cONRecordDetailDl.Remove(accounting.RecordDetails);
                                    if (accounting.Errors1 != null && accounting.Errors1.Count > 0)
                                        cONErrorDl.Remove(accounting.Errors1);

                                    accountings[k].LastUpdate = data.LastUpdate;
                                    accountings[k].UpdatedBy = data.UpdatedBy;
                                    accountings[k].Id = accounting.Id;
                                    accountings[k] = cONRecordDl.Execute(accountings[k], Actions.Modify, Options.All, "");
                                }
                                else
                                    accountings[k] = accounting;
                            }
                        }
                        List<SQLParameter> parames = new List<SQLParameter>();
                        if (data.Entities[i].SQLParameters != null && data.Entities[i].SQLParameters.Count > 0)
                        {
                            foreach (var item in data.Entities[i].SQLParameters)
                            {
                                SQLParameter prm = new SQLParameter();
                                prm.DateValue = item.DateValue;
                                prm.Name = item.Name;
                                prm.Int32Value = item.Int32Value;
                                prm.StringValue = item.StringValue;

                                parames.Add(prm);
                            }
                        }
                        DatabaseDirectAcces daacess = new DatabaseDirectAcces(UtilBLL.GetConnectionString((data.Entities[i].StoreProcedureConnection == null) ? data.Entities[i].Connection : data.Entities[i].StoreProcedureConnection), UtilBLL.GetConnectionDBType((data.Entities[i].StoreProcedureConnection == null) ? data.Entities[i].Connection.DbType : data.Entities[i].StoreProcedureConnection.DbType));
                        if (!String.IsNullOrWhiteSpace(data.Entities[i].ExecuteStoreProcedure))
                            daacess.ExecuteStoreProcedure(data.Entities[i].ExecuteStoreProcedure, parames);

                        // dalNH.ExecuteStoreProcedureSQL(sql, sql.SQLParameters);
                        if (data.Entities[i].ChildSQLs != null && data.Entities[i].ChildSQLs.Count > 0)
                        {
                            foreach (var item in data.Entities[i].ChildSQLs)
                            {
                                daacess = new DatabaseDirectAcces(UtilBLL.GetConnectionString((data.Entities[i].StoreProcedureConnection == null) ? data.Entities[i].Connection : data.Entities[i].StoreProcedureConnection), UtilBLL.GetConnectionDBType((data.Entities[i].StoreProcedureConnection == null) ? data.Entities[i].Connection.DbType : data.Entities[i].StoreProcedureConnection.DbType));
                                if (!String.IsNullOrWhiteSpace(item.ExecuteStoreProcedure))
                                    daacess.ExecuteStoreProcedure(item.ExecuteStoreProcedure, parames);
                                //dalNH.ExecuteStoreProcedureSQL(item, item.SQLParameters);
                            }
                        }
                    }
                    if ((Boolean)data.GetAditionalProperty("Accounting"))
                        UNOEEImport(accountings);
                }
                return data = new CONSQL();
            }
            catch (Exception e)
            {
                throw new BusinessException(e).GetFaultException();
            }
        }

        public void AddDetails(CONSQL data)
        {
            if (data.SQLDetails != null && data.SQLDetails.Count > 0)
            {
                for (int i = 0; i < data.SQLDetails.Count; i++)
                {
                    data.SQLDetails[i].SQLId = data.Id;
                    data.SQLDetails[i].LastUpdate = DateTime.Now;
                    data.SQLDetails[i].UpdatedBy = data.UpdatedBy;
                    if (data.SQLDetails[i].Equivalence != null)
                        data.SQLDetails[i].EquivalenceId = data.SQLDetails[i].Equivalence.Id;
                    if (data.SQLDetails[i].MainSQLDetail != null)
                        data.SQLDetails[i].MainSQLDetailId = data.SQLDetails[i].MainSQLDetail.Id;
                    if (data.SQLDetails[i].StructureDetail != null)
                        data.SQLDetails[i].StructureDetailId = data.SQLDetails[i].StructureDetail.Id;
                    if (data.SQLDetails[i].Id == 0)
                        data.SQLDetails[i] = cONSQLDetailDl.Add(data.SQLDetails[i]);
                    else
                        data.SQLDetails[i] = cONSQLDetailDl.Modify(data.SQLDetails[i]);
                }
            }
            if (data.SQLParameters != null && data.SQLParameters.Count > 0)
            {
                for (int i = 0; i < data.SQLParameters.Count; i++)
                {
                    data.SQLParameters[i].SQLId = data.Id;
                    data.SQLParameters[i].LastUpdate = DateTime.Now;
                    data.SQLParameters[i].UpdatedBy = data.UpdatedBy;
                    if (data.SQLParameters[i].Id == 0)
                        data.SQLParameters[i] = cONSQLParameterDl.Add(data.SQLParameters[i]);
                    else
                        data.SQLParameters[i] = cONSQLParameterDl.Modify(data.SQLParameters[i]);
                }
            }
            if (data.SQLSends != null && data.SQLSends.Count > 0)
            {
                for (int i = 0; i < data.SQLSends.Count; i++)
                {
                    data.SQLSends[i].SQLId = data.Id;
                    data.SQLSends[i].LastUpdate = DateTime.Now;
                    data.SQLSends[i].UpdatedBy = data.UpdatedBy;
                    if (data.SQLSends[i].CONIntegratorConfiguration != null)
                        data.SQLSends[i].CONIntegratorConfigurationId = data.SQLSends[i].CONIntegratorConfiguration.Id;
                    if (data.SQLSends[i].Id == 0)
                        data.SQLSends[i] = cONSQLSendDl.Add(data.SQLSends[i]);
                    else
                        data.SQLSends[i] = cONSQLSendDl.Modify(data.SQLSends[i]);
                }
            }
            if (data.ChildSQLs != null && data.ChildSQLs.Count > 0)
            {
                for (int i = 0; i < data.ChildSQLs.Count; i++)
                {
                    data.ChildSQLs[i].MainSQLId = data.Id;
                    data.ChildSQLs[i].LastUpdate = DateTime.Now;
                    data.ChildSQLs[i].UpdatedBy = data.UpdatedBy;
                    if (data.ChildSQLs[i].Company != null)
                        data.ChildSQLs[i].CompanyId = data.ChildSQLs[i].Company.Id;
                    if (data.ChildSQLs[i].Structure != null)
                        data.ChildSQLs[i].StructureId = data.ChildSQLs[i].Structure.Id;
                    if (data.ChildSQLs[i].Id == 0)
                        data.ChildSQLs[i] = cONSQLDl.Add(data.ChildSQLs[i]);
                    else
                        data.ChildSQLs[i] = cONSQLDl.Modify(data.ChildSQLs[i]);
                    AddDetails(data.ChildSQLs[i]);
                }
            }

        }

        public override void CommonRules(CONSQL data)
        {
            base.CommonRules(data);
        }

        public override void AddRules(CONSQL data)
        {
            base.AddRules(data);
            data.LastUpdate = DateTime.Now;
        }

        public override void ModifyRules(CONSQL data)
        {
            base.ModifyRules(data);
            data.LastUpdate = DateTime.Now;
        }

        public override void RemoveRules(CONSQL data)
        {
            base.RemoveRules(data);
        }

        public override void FindByIdRules(CONSQL data)
        {
            base.FindByIdRules(data);
        }

        public List<CONRecord> GetDataQuery(CONSQL sql)
        {
            try
            {
                List<CONRecord> accountings = new List<CONRecord>();
                DatabaseDirectAcces daacess = new DatabaseDirectAcces(UtilBLL.GetConnectionString(sql.Connection), UtilBLL.GetConnectionDBType(sql.Connection.DbType));
                List<SQLParameter> parames = new List<SQLParameter>();
                if (sql.SQLParameters != null && sql.SQLParameters.Count > 0)
                {
                    foreach (var item in sql.SQLParameters)
                    {
                        SQLParameter prm = new SQLParameter();
                        prm.DateValue = item.DateValue;
                        prm.Name = item.Name;
                        prm.Int32Value = item.Int32Value;
                        prm.StringValue = item.StringValue;

                        parames.Add(prm);
                    }
                }
                ResultList result = daacess.ExecuteQuery(sql.SQLSentence, parames, 0);
                if (result != null && result.GetRows().Count > 0)
                {

                    for (int i = 0; i < result.GetRows().Count; i++)
                    {
                        CONRecord acco = new CONRecord();
                        acco = GetInvisibleColumns(sql, acco);
                        acco.Fields = new Dictionary<string, string>();
                        acco.Fields.Add("F_NUMERO_REG", Utils.ValidateNumber(acco.RecordNumber, 7, "F_NUMERO_REG"));
                        acco.Fields.Add("F_TIPO_REG", Utils.ValidateNumber(acco.RecordType, 4, "F_TIPO_REG"));
                        acco.Fields.Add("F_SUBTIPO_REG", Utils.ValidateNumber(acco.SubRecordType, 2, "F_SUBTIPO_REG"));
                        acco.Fields.Add("F_VERSION_REG", Utils.ValidateNumber(acco.Version, 2, "F_VERSION_REG"));
                        acco.Company = Utils.ValidateNumber(GetItemFieldValue(result, i, sql.SQLDetails, "F_CIA"), 3, "F_CIA");
                        if (sql.SQLDetails != null && sql.SQLDetails.Count > 0)
                        {
                            for (int j = 0; j < sql.SQLDetails.Count; j++)
                            {
                                //acco.Fields.Add(sql.SQLDetails[j].StructureDetail.Field.ToUpper(), Utils.ValidateNumber(GetItemFieldValue(result,i sql.SQLDetails[j]),  (int)sql.SQLDetails[j].StructureDetail.Sizes, sql.SQLDetails[j].StructureDetail.Field));
                                if (sql.SQLDetails[j].StructureDetail.DBType == 1)
                                    acco.Fields.Add(sql.SQLDetails[j].StructureDetail.Field.ToUpper(), Utils.ValidateNumber(GetItemFieldValue(result, i, sql.SQLDetails[j]), (int)sql.SQLDetails[j].StructureDetail.Sizes, sql.SQLDetails[j].StructureDetail.Field));
                                else if (sql.SQLDetails[j].StructureDetail.DBType == 2)
                                    acco.Fields.Add(sql.SQLDetails[j].StructureDetail.Field.ToUpper(), Utils.ValidateString(GetItemFieldValue(result, i, sql.SQLDetails[j]), (int)sql.SQLDetails[j].StructureDetail.Sizes, sql.SQLDetails[j].StructureDetail.Field));
                                else if (sql.SQLDetails[j].StructureDetail.DBType == 3)
                                    acco.Fields.Add(sql.SQLDetails[j].StructureDetail.Field.ToUpper(), Utils.ValidateDate(GetItemFieldDateValue(result, i, sql.SQLDetails[j]), sql.SQLDetails[j].StructureDetail.Field));
                                else if (sql.SQLDetails[j].StructureDetail.DBType == 4)
                                    acco.Fields.Add(sql.SQLDetails[j].StructureDetail.Field.ToUpper(), Utils.ValidateDecimal(GetItemFieldDecimalValue(result, i, sql.SQLDetails[j]), sql.SQLDetails[j].StructureDetail.Ent, sql.SQLDetails[j].StructureDetail.Dec, sql.SQLDetails[j].StructureDetail.Field, true));
                                else if (sql.SQLDetails[j].StructureDetail.DBType == 5)
                                {
                                    var datnum = result.GetValue(i, sql.SQLDetails[j].Secuence);
                                    acco.Fields.Add(sql.SQLDetails[j].StructureDetail.Field.ToUpper(), Utils.ValidateDecimal(GetItemFieldDecimalValue(result, i, sql.SQLDetails[j]), sql.SQLDetails[j].StructureDetail.Ent, sql.SQLDetails[j].StructureDetail.Dec, sql.SQLDetails[j].StructureDetail.Field, false));
                                }
                            }
                        }
                        acco.LogicalKey = acco.Fields["LLAVELOGICA"].Replace(" ", "");
                        acco.Fields.Remove("LLAVELOGICA");

                        if (acco.Fields.ContainsKey("F350_ID_CO"))
                            acco.OperationCenter = acco.Fields["F350_ID_CO"];
                        if (acco.Fields.ContainsKey("F350_ID_TIPO_DOCTO"))
                            acco.DocumentType = acco.Fields["F350_ID_TIPO_DOCTO"];
                        if (acco.Fields.ContainsKey("F350_CONSEC_DOCTO"))
                            acco.DocumentNumber = Int32.Parse(acco.Fields["F350_CONSEC_DOCTO"]);
                        if (acco.RecordType == 420)
                        {
                            if (acco.Fields.ContainsKey("F420_ID_CO"))
                                acco.OperationCenter = acco.Fields["F420_ID_CO"];
                            if (acco.Fields.ContainsKey("F420_ID_TIPO_DOCTO"))
                                acco.DocumentType = acco.Fields["F420_ID_TIPO_DOCTO"];
                            if (acco.Fields.ContainsKey("F420_CONSEC_DOCTO"))
                                acco.DocumentNumber = Int32.Parse(acco.Fields["F420_CONSEC_DOCTO"]);
                        }
                        if (acco.Fields.ContainsKey("F440_ID_CO"))
                            acco.OperationCenter = acco.Fields["F440_ID_CO"];
                        if (acco.Fields.ContainsKey("F440_ID_TIPO_DOCTO"))
                            acco.DocumentType = acco.Fields["F440_ID_TIPO_DOCTO"];
                        if (acco.Fields.ContainsKey("F440_CONSEC_DOCTO"))
                            acco.DocumentNumber = Int32.Parse(acco.Fields["F440_CONSEC_DOCTO"]);
                        acco.SQLId = sql.Id;
                        acco.SQL = sql;
                        accountings.Add(acco);
                    }
                }
                return accountings;
            }
            catch (Exception e)
            {
                throw new BusinessException(e).GetFaultException();
            }
        }

        public List<CONRecordDetail> GetDataQueryDetail(CONSQL sql)
        {
            try
            {
                List<CONRecordDetail> accountings = new List<CONRecordDetail>();
                DatabaseDirectAcces daacess = new DatabaseDirectAcces(UtilBLL.GetConnectionString(sql.Connection), UtilBLL.GetConnectionDBType(sql.Connection.DbType));
                List<SQLParameter> parames = new List<SQLParameter>();
                if (sql.SQLParameters != null && sql.SQLParameters.Count > 0)
                {
                    foreach (var item in sql.SQLParameters)
                    {
                        SQLParameter prm = new SQLParameter();
                        prm.DateValue = item.DateValue;
                        prm.Name = item.Name;
                        prm.Int32Value = item.Int32Value;
                        prm.StringValue = item.StringValue;

                        parames.Add(prm);
                    }
                }
                ResultList result = daacess.ExecuteQuery(sql.SQLSentence, parames, 0);
                if (result != null && result.GetRows().Count > 0)
                {

                    for (int i = 0; i < result.GetRows().Count; i++)
                    {
                        CONRecordDetail acco = new CONRecordDetail();
                        acco = GetInvisibleColumns(sql, acco);
                        acco.Fields = new Dictionary<string, string>();
                        acco.Fields.Add("F_NUMERO_REG", Utils.ValidateNumber(acco.RecordNumber, 7, "F_NUMERO_REG"));
                        acco.Fields.Add("F_TIPO_REG", Utils.ValidateNumber(acco.RecordType, 4, "F_TIPO_REG"));
                        acco.Fields.Add("F_SUBTIPO_REG", Utils.ValidateNumber(acco.SubRecordType, 2, "F_SUBTIPO_REG"));
                        acco.Fields.Add("F_VERSION_REG", Utils.ValidateNumber(acco.Version, 2, "F_VERSION_REG"));
                        acco.Company = Utils.ValidateNumber(GetItemFieldValue(result, i, sql.SQLDetails, "F_CIA"), 3, "F_CIA");
                        if (sql.SQLDetails != null && sql.SQLDetails.Count > 0)
                        {
                            for (int j = 0; j < sql.SQLDetails.Count; j++)
                            {
                                //acco.Fields.Add(sql.SQLDetails[j].StructureDetail.Field.ToUpper(), Utils.ValidateNumber(GetItemFieldValue(result,i sql.SQLDetails[j]),  (int)sql.SQLDetails[j].StructureDetail.Sizes, sql.SQLDetails[j].StructureDetail.Field));
                                if (sql.SQLDetails[j].StructureDetail.DBType == 1)
                                    acco.Fields.Add(sql.SQLDetails[j].StructureDetail.Field.ToUpper(), Utils.ValidateNumber(GetItemFieldValue(result, i, sql.SQLDetails[j]), (int)sql.SQLDetails[j].StructureDetail.Sizes, sql.SQLDetails[j].StructureDetail.Field));
                                else if (sql.SQLDetails[j].StructureDetail.DBType == 2)
                                    acco.Fields.Add(sql.SQLDetails[j].StructureDetail.Field.ToUpper(), Utils.ValidateString(GetItemFieldValue(result, i, sql.SQLDetails[j]), (int)sql.SQLDetails[j].StructureDetail.Sizes, sql.SQLDetails[j].StructureDetail.Field));
                                else if (sql.SQLDetails[j].StructureDetail.DBType == 3)
                                    acco.Fields.Add(sql.SQLDetails[j].StructureDetail.Field.ToUpper(), Utils.ValidateDate(GetItemFieldDateValue(result, i, sql.SQLDetails[j]), sql.SQLDetails[j].StructureDetail.Field));
                                else if (sql.SQLDetails[j].StructureDetail.DBType == 4)
                                    acco.Fields.Add(sql.SQLDetails[j].StructureDetail.Field.ToUpper(), Utils.ValidateDecimal(GetItemFieldDecimalValue(result, i, sql.SQLDetails[j]), sql.SQLDetails[j].StructureDetail.Ent, sql.SQLDetails[j].StructureDetail.Dec, sql.SQLDetails[j].StructureDetail.Field, true));
                                else if (sql.SQLDetails[j].StructureDetail.DBType == 5)
                                {
                                    var datnum = result.GetValue(i, sql.SQLDetails[j].Secuence);
                                    acco.Fields.Add(sql.SQLDetails[j].StructureDetail.Field.ToUpper(), Utils.ValidateDecimal(GetItemFieldDecimalValue(result, i, sql.SQLDetails[j]), sql.SQLDetails[j].StructureDetail.Ent, sql.SQLDetails[j].StructureDetail.Dec, sql.SQLDetails[j].StructureDetail.Field, false));
                                }
                            }
                        }
                        acco.LogicalKey = acco.Fields["LLAVELOGICA"].Replace(" ", "");
                        acco.Fields.Remove("LLAVELOGICA");

                        if (acco.Fields.ContainsKey("F350_ID_CO"))
                            acco.OperationCenter = acco.Fields["F350_ID_CO"];
                        if (acco.Fields.ContainsKey("F350_ID_TIPO_DOCTO"))
                            acco.DocumentType = acco.Fields["F350_ID_TIPO_DOCTO"];
                        if (acco.Fields.ContainsKey("F350_CONSEC_DOCTO"))
                            acco.DocumentNumber = Int32.Parse(acco.Fields["F350_CONSEC_DOCTO"]);
                        if (acco.RecordType == 420)
                        {
                            if (acco.Fields.ContainsKey("F420_ID_CO"))
                                acco.OperationCenter = acco.Fields["F420_ID_CO"];
                            if (acco.Fields.ContainsKey("F420_ID_TIPO_DOCTO"))
                                acco.DocumentType = acco.Fields["F420_ID_TIPO_DOCTO"];
                            if (acco.Fields.ContainsKey("F420_CONSEC_DOCTO"))
                                acco.DocumentNumber = Int32.Parse(acco.Fields["F420_CONSEC_DOCTO"]);
                        }
                        if (acco.Fields.ContainsKey("F440_ID_CO"))
                            acco.OperationCenter = acco.Fields["F440_ID_CO"];
                        if (acco.Fields.ContainsKey("F440_ID_TIPO_DOCTO"))
                            acco.DocumentType = acco.Fields["F440_ID_TIPO_DOCTO"];
                        if (acco.Fields.ContainsKey("F440_CONSEC_DOCTO"))
                            acco.DocumentNumber = Int32.Parse(acco.Fields["F440_CONSEC_DOCTO"]);
                        acco.SQLId = sql.Id;
                        acco.SQL = sql;
                        accountings.Add(acco);
                    }
                }
                return accountings;
            }
            catch (Exception e)
            {
                throw new BusinessException(e).GetFaultException();
            }
        }

        private String GetItemFieldValue(ResultList result, int row, List<CONSQLDetail> details, String fieldName)
        {
            String fieldValue = "";
            CONSQLDetail sqlDet = details.FirstOrDefault(x => x.StructureDetail.Field.ToUpper().Equals(fieldName.ToUpper()));
            fieldValue = result.GetValue(row, sqlDet.Secuence).ToString(); // dataReader.GetValue(sqlDet.Secuence).ToString();
            if (sqlDet.Equivalence != null && sqlDet.EquivalenceColumnId != null && sqlDet.EquivalenceColumnId > 0)
                fieldValue = GetEquivalenceValue(sqlDet.Equivalence.Id, (Int16)sqlDet.EquivalenceColumnId, fieldValue);
            return fieldValue;
        }

        private string GetEquivalenceValue(Int32 EquivalenceIds, short valueColumn, string code)
        {
            cONEquivalenceDetailDl = new CONEquivalenceDetailBLL(Work.Settings);
            if (!String.IsNullOrWhiteSpace(code))
            {
                CONEquivalenceDetail data = cONEquivalenceDetailDl.FindById(new CONEquivalenceDetail { Equivalence = new CONEquivalence { Id = EquivalenceIds }, Code = code });
                if (data != null)
                {
                    if (valueColumn == 1)
                        return data.Value1;
                    else if (valueColumn == 2)
                        return data.Value2;
                    else if (valueColumn == 3)
                        return data.Value3;
                    else if (valueColumn == 4)
                        return data.Value4;
                    else if (valueColumn == 5)
                        return data.Value5;
                    else if (valueColumn == 6)
                        return data.Value6;
                    else if (valueColumn == 7)
                        return data.Value7;
                    else if (valueColumn == 8)
                        return data.Value8;
                    else if (valueColumn == 9)
                        return data.Value9;
                    else if (valueColumn == 10)
                        return data.Value10;
                    else
                        return "?ER";
                }
            }
            return "?NF";
        }

        private Decimal? GetItemFieldDecimalValue(ResultList result, int row, List<CONSQLDetail> details, String fieldName)
        {
            Decimal? fieldValue = 0;
            Decimal fieldValue1 = 0;
            CONSQLDetail sqlDet = details.FirstOrDefault(x => x.StructureDetail.Field.ToUpper().Equals(fieldName.ToUpper()));
            var objectType = result.GetValue(row, sqlDet.Secuence);
            if (objectType.GetType() == typeof(Decimal))
                fieldValue = (Decimal?)result.GetDecimalValue(row, sqlDet.Secuence);
            else
            {
                if (Decimal.TryParse(objectType.ToString(), out fieldValue1))
                    fieldValue = fieldValue1;
            }
            return fieldValue;
        }

        private Decimal? GetItemFieldDecimalValue(ResultList result, int row, CONSQLDetail detail)
        {
            Decimal? fieldValue = 0;
            Decimal fieldValue1 = 0;
            var objectType = result.GetValue(row, detail.Secuence);

            if (objectType.GetType() == typeof(Decimal))
                fieldValue = result.GetDecimalValue(row, detail.Secuence);
            else
            {
                if (Decimal.TryParse(objectType.ToString(), out fieldValue1))
                    fieldValue = fieldValue1;
            }

            return fieldValue;
        }

        private String GetItemFieldValue(ResultList result, int row, CONSQLDetail detail)
        {
            String fieldValue = "";
            fieldValue = result.GetValue(row, detail.Secuence).ToString();
            if (detail.Equivalence != null && detail.EquivalenceColumnId != null && detail.EquivalenceColumnId > 0)
                fieldValue = GetEquivalenceValue(detail.Equivalence.Id, (Int16)detail.EquivalenceColumnId, fieldValue);
            return fieldValue;
        }

        private DateTime? GetItemFieldDateValue(ResultList result, int row, CONSQLDetail detail)
        {
            DateTime? fieldValue = DateTime.MinValue;
            var objectType = result.GetValue(row, detail.Secuence);
            if (objectType != null && objectType.GetType() == typeof(DateTime))
                fieldValue = result.GetDateTimeValue(row, detail.Secuence);
            else
                fieldValue = null;
            return fieldValue;
        }

        private DateTime GetItemFieldDateValue(ResultList result, int row, List<CONSQLDetail> details, String fieldName)
        {
            DateTime fieldValue = DateTime.MinValue;
            CONSQLDetail sqlDet = details.FirstOrDefault(x => x.StructureDetail.Field.ToUpper().Equals(fieldName.ToUpper()));
            var objectType = result.GetValue(row, sqlDet.Secuence);
            if (objectType.GetType() == typeof(DateTime))
                fieldValue = result.GetDateTimeValue(row, sqlDet.Secuence);
            return fieldValue;
        }

        private CONRecord GetInvisibleColumns(CONSQL sql, CONRecord data)
        {
            cONStructureDetailDl = new CONStructureDetailBLL(Work.Settings);
            List<CONStructureDetail> cols = cONStructureDetailDl.FindAll(new CONStructureDetail { Visible = false, Structure = new CONStructure { Id = sql.Structure.Id } }, Options.All);
            if (cols != null && cols.Count > 0)
            {
                foreach (CONStructureDetail col in cols)
                {
                    if (col.Field.ToUpper() == "f_numero_reg".ToUpper())
                        data.RecordNumber = Int32.Parse(col.DefaultValue);
                    else if (col.Field.ToUpper() == "f_tipo_reg".ToUpper())
                        data.RecordType = Int32.Parse(col.DefaultValue);
                    else if (col.Field.ToUpper() == "f_subtipo_reg".ToUpper())
                        data.SubRecordType = Int32.Parse(col.DefaultValue);
                    else if (col.Field.ToUpper() == "f_version_reg".ToUpper())
                        data.Version = Int32.Parse(col.DefaultValue);
                }
            }
            return data;
        }

        private CONRecordDetail GetInvisibleColumns(CONSQL sql, CONRecordDetail data)
        {
            cONStructureDetailDl = new CONStructureDetailBLL(Work.Settings);
            List<CONStructureDetail> cols = cONStructureDetailDl.FindAll(new CONStructureDetail { Visible = false, Structure = new CONStructure { Id = sql.Structure.Id } });
            if (cols != null && cols.Count > 0)
            {
                foreach (CONStructureDetail col in cols)
                {
                    if (col.Field.ToUpper() == "f_numero_reg".ToUpper())
                        data.RecordNumber = Int32.Parse(col.DefaultValue);
                    else if (col.Field.ToUpper() == "f_tipo_reg".ToUpper())
                        data.RecordType = Int32.Parse(col.DefaultValue);
                    else if (col.Field.ToUpper() == "f_subtipo_reg".ToUpper())
                        data.SubRecordType = Int32.Parse(col.DefaultValue);
                    else if (col.Field.ToUpper() == "f_version_reg".ToUpper())
                        data.Version = Int32.Parse(col.DefaultValue);
                }
            }
            return data;
        }

        public bool UNOEEImport(List<CONRecord> parames)
        {
            int e = 0;
            //bool succes = true;
            if (parames != null && parames.Count > 0)
            {
                foreach (CONRecord record in parames)
                {
                    CONRecord data = null;
                    if (record.SQL.SQLSends == null )
                    {
                        cONSQLSendDl = new CONSQLSendBLL(Work);
                        record.SQL.SQLSends = cONSQLSendDl.FindAll(new CONSQLSend { SQLId = record.SQL.Id});

                    }

                    if (record.SQL.SQLSends != null && record.SQL.SQLSends.Count > 0)

                        foreach (var send in record.SQL.SQLSends)
                        {
                            if (send.Active == true)
                                data = UNOEEDirectImport(UtilBLL.GetConnectionString(send.CONIntegratorConfiguration.Connection), UtilBLL.GetConnectionDBType(send.CONIntegratorConfiguration.Connection.DbType), send.CONIntegratorConfiguration, record);
                            //else
                            //    data = UNOEEWebImport(UtilDL.GetConnectionString(send.CONIntegratorConfiguration.Connection), UtilDL.GetConnectionDBType(send.CONIntegratorConfiguration.Connection.DbType), send.CONIntegratorConfiguration, record);
                        }

                    if (data == null || (data.Errors1 != null && data.Errors1.Count > 0))
                        e++;
                        //succes = false;
                        
                    
                }
                if (e > 0)
                    return false;
                else
                    return true;
            }
            else
                return false;

        }

        //public CONRecord UNOEEWebImport(string connectionString, DBType dbType, CONIntegratorConfiguration conf, CONRecord param)
        //{
        //    try
        //    {
        //        cONRecordDl = new CONRecordDL(Work.Settings);
        //        cONErrorDl = new CONErrorDL(Work.Settings);
        //        string UNOEEConnectionStringName = conf.InternalConnectionName;
        //        string UNOEEUser = conf.InternalUser;
        //        string UNOEEPasword = Crypto.DecrytedString(conf.InternalPassword);
        //        string idOperationCenter = "";
        //        string idDocumentType = "";
        //        string stringXML = string.Empty;
        //        if (param.IsDocument())
        //        {
        //            idOperationCenter = "F" + param.RecordType + "_ID_CO";
        //            idDocumentType = "F" + param.RecordType + "_ID_TIPO_DOCTO";
        //        }
        //        if (param.IsDocument() && param.DocumentNumber == 0)
        //            param.DocumentNumber = GetConsecutive(param.Fields[idOperationCenter] + "" + param.Fields[idDocumentType]);
        //        int j = 1;
        //        CONInitial inicial = new CONInitial { RecordNumber = j.ToString(), RecordType = "0", SubRecordType = "0", Version = "01", Company = param.Company + "" };
        //        j++;
        //        param.RecordNumber = j;
        //        j++;
        //        stringXML = "<Importar>\n " +
        //                        "   <NombreConexion>" + UNOEEConnectionStringName + "</NombreConexion>\n " +
        //                        "   <IdCia>" + param.Company + "</IdCia>\n " +
        //                        "   <Usuario>" + UNOEEUser + "</Usuario>\n " +
        //                        "   <Clave>" + UNOEEPasword + "</Clave>\n " +
        //                        "   <Datos>\n " +
        //                        "       <Linea>" + inicial.PlainText + "</Linea>\n";
        //        stringXML += "      <Linea>" + param.PlainText.Replace("&", " ") + "</Linea>\n";
        //        if (param.RecordDetails != null && param.RecordDetails.Count > 0)
        //            for (int i = 0; i < param.RecordDetails.Count; i++)
        //            {
        //                param.RecordDetails[i].RecordNumber = j;
        //                param.RecordDetails[i].DocumentNumber = param.DocumentNumber;
        //                stringXML += "      <Linea>" + param.RecordDetails[i].PlainText.Replace("&", " ") + "</Linea>\n";
        //                j++;
        //            }
        //        CONFinal final = new CONFinal { RecordNumber = j.ToString(), RecordType = "9999", SubRecordType = "0", Version = "01", Company = param.Company + "" };
        //        stringXML += "      <Linea>" + final.ToString() + "</Linea>\n";
        //        stringXML += "  </Datos>\n " +
        //                     "</Importar>";

        //        List<CONError> errors = ((UnitOfWork)Work).UNOEEImport(conf, stringXML);
        //        if (errors == null)
        //        {
        //            if (param.IsDocument())
        //            {
        //                if (Work.ValidateDocumentUNOEE(connectionString, dbType, Int16.Parse(param.Company), param.OperationCenter, param.DocumentType, (Int32)param.DocumentNumber))
        //                    param.IsSend = true;
        //                else
        //                    param.IsSend = false;
        //            }
        //            else
        //            {
        //                param.IsSend = true;
        //            }
        //            cONRecordDl.Execute(param, Actions.Modify, Options.Me, "");
        //        }
        //        else
        //        {
        //            List<CONError> conerrosOld = cONErrorDl.FindAll(new CONError { RecordId = param.Id, Record = new CONRecord { Id = param.Id } });
        //            if (conerrosOld != null && conerrosOld.Count > 0)
        //                cONErrorDl.Remove(conerrosOld);
        //            param.Errors1 = errors;
        //            cONRecordDl.Execute(param, Actions.Modify, Options.All, "");
        //        }
        //        return param;
        //    }
        //    catch (Exception e)
        //    {
        //        throw new BusinessException(e).GetFaultException();
        //    }
        //}

        public CONRecord UNOEEDirectImport(string connectionString, DBType dbType, CONIntegratorConfiguration conf, CONRecord param)
        {
            try
            {
                cONRecordDl = new CONRecordBLL(Work.Settings);
                cONErrorDl = new CONErrorBLL(Work.Settings);
                string UNOEEConnectionStringName = conf.InternalConnectionName;
                string UNOEEUser = conf.InternalUser;
                string UNOEEPasword = Crypto.DecrytedString(conf.InternalPassword);
                string idOperationCenter = "";
                string idDocumentType = "";
                List<string> stringXML = new List<string>();
                if (param.IsDocument())
                {
                    idOperationCenter = "F" + param.RecordType + "_ID_CO";
                    idDocumentType = "F" + param.RecordType + "_ID_TIPO_DOCTO";
                }
                if (param.IsDocument() && param.DocumentNumber == 0)
                    param.DocumentNumber = GetConsecutive(param.Fields[idOperationCenter] + "" + param.Fields[idDocumentType]);
                int j = 1;
                CONInitial inicial = new CONInitial { RecordNumber = j.ToString(), RecordType = "0", SubRecordType = "0", Version = "01", Company = param.Company + "" };
                j++;
                param.RecordNumber = j;
                j++;
                stringXML.Add(inicial.PlainText);
                stringXML.Add(param.PlainText.Replace("&", " "));
                if (param.RecordDetails != null && param.RecordDetails.Count > 0)
                    for (int i = 0; i < param.RecordDetails.Count; i++)
                    {
                        param.RecordDetails[i].RecordNumber = j;
                        param.RecordDetails[i].DocumentNumber = param.DocumentNumber;
                        stringXML.Add(param.RecordDetails[i].PlainText.Replace("&", " "));
                        j++;
                    }
                CONFinal final = new CONFinal { RecordNumber = j.ToString(), RecordType = "9999", SubRecordType = "0", Version = "01", Company = param.Company + "" };
                stringXML.Add(final.PlainText);
                Work.InsertT667ImpConectorControl(connectionString, dbType, param.LastUpdate.ToString(), Int16.Parse(param.Company), param.LogicalKey);
                if (stringXML != null && stringXML.Count > 0)
                {
                    foreach (string item in stringXML)
                    {
                        Work.InsertT668ImpConectorDetalle(connectionString, dbType, param.LastUpdate.ToString(), Int16.Parse(param.Company), param.LogicalKey, item);
                    }
                }
                ProcessStartInfo startInfo = new ProcessStartInfo(conf.ProgramPath, " 1, "+conf.ConnectionNumber+", "+conf.InternalUser+", "+ Crypto.DecrytedString(conf.InternalPassword)+", "+Int16.Parse(param.Company)+", "+param.LastUpdate+", "+param.LogicalKey+" , 1" );
                startInfo.UseShellExecute = false;
                startInfo.ErrorDialog = true;
                startInfo.CreateNoWindow = true;
                Process process = Process.Start(startInfo);
                process.WaitForExit();

                int numRef = process.ExitCode;
               
                process.Close();
                List<CONError> errors = null;
                if(numRef!=0)
                    errors = ((UnitOfWork)Work).GetImportErrors(connectionString, dbType, param.LastUpdate.ToString(), Int16.Parse(param.Company), param.LogicalKey, numRef);
                if (errors == null || errors.Count==0)
                {
                    if (param.IsDocument())
                    {
                        if (Work.ValidateDocumentUNOEE(connectionString, dbType, Int16.Parse(param.Company), param.OperationCenter, param.DocumentType, (Int32)param.DocumentNumber))
                            param.IsSend = true;
                        else
                            param.IsSend = false;
                    }
                    else
                    {
                        param.IsSend = true;
                    }
                    cONRecordDl.Execute(param, Actions.Modify, Options.Me, "");
                }
                else
                {
                    List<CONError> conerrosOld = cONErrorDl.FindAll(new CONError { RecordId = param.Id, Record = new CONRecord { Id = param.Id } });
                    if (conerrosOld != null && conerrosOld.Count > 0)
                        cONErrorDl.Remove(conerrosOld);
                    param.Errors1 = errors;
                    cONRecordDl.Execute(param, Actions.Modify, Options.All, "");
                }
                return param;
            }

            catch (Exception e)
            {
                throw new BusinessException(e).GetFaultException();
            }
        }

    }
}