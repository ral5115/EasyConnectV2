using EasyTools.Framework.Application;
using EasyTools.Framework.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;

namespace EasyTools.Framework.Persistance
{
    public class DatabaseDirectAcces
    {
        private string connectionString;

        private DBType dbType;

        private DbProviderFactory factoryDb = null;

        private DbConnection connection = null;

        private DbCommand command = null;

        public DatabaseDirectAcces(string connectionString, DBType dbType)
        {
            this.connectionString = connectionString;
            this.dbType = dbType;
        }

        private string GetProvider()
        {
            if (dbType == DBType.SQLServer)
                return "System.Data.SqlClient";
            else if (dbType == DBType.Oracle)
                return "System.Data.OracleClient";
            else
                return "System.Data.SqlClient";
        }

        public void ExecuteStoreProcedure(string sqlSentence, List<SQLParameter> parameters)
        {
            try
            {
                factoryDb = DbProviderFactories.GetFactory(GetProvider());
                connection = factoryDb.CreateConnection();
                connection.ConnectionString = connectionString;

                //Se abre la conexión
                connection.Open();

                //Se crea el SQl Command que sera el encargado de ejecutar la consulta, se le asocia la consulta y se ejecuta el datareader
                command = connection.CreateCommand();
                command.CommandType = CommandType.Text;
                command.CommandTimeout = 0;
                command.CommandText = sqlSentence;
                if (parameters != null && parameters.Count > 0)
                    AddParameters(parameters, dbType);
                command.ExecuteNonQuery();
            }
            catch (Exception e)
            {
                throw new BusinessException(e).GetFaultException();
            }
            finally
            {
                if (connection != null && connection.State != System.Data.ConnectionState.Closed)
                    connection.Close();
            }
        }

        public void ExecuteNonQuery(string sqlSentence, List<SQLParameter> parameters)
        {
            try
            {
                factoryDb = DbProviderFactories.GetFactory(GetProvider());
                connection = factoryDb.CreateConnection();
                connection.ConnectionString = connectionString;

                //Se abre la conexión
                connection.Open();

                //Se crea el SQl Command que sera el encargado de ejecutar la consulta, se le asocia la consulta y se ejecuta el datareader
                command = connection.CreateCommand();
                command.CommandType = CommandType.Text;
                command.CommandTimeout = 0;
                command.CommandText = sqlSentence;
                if (parameters != null && parameters.Count > 0)
                    AddParameters(parameters, dbType);
               var a = command.ExecuteNonQuery();
            }
            catch (Exception e)
            {
                throw new BusinessException(e).GetFaultException();
            }
            finally
            {
                if (connection != null && connection.State != System.Data.ConnectionState.Closed)
                    connection.Close();
            }
        }

        public ResultList ExecuteQuery(string sqlSentence, List<SQLParameter> parameters, int recordNumber)
        {
            DbDataReader dataReader = null;

            ResultList result = null;
            try
            {
                factoryDb = DbProviderFactories.GetFactory(GetProvider());
                connection = factoryDb.CreateConnection();
                connection.ConnectionString = connectionString;

                //Se abre la conexión
                connection.Open();

                //Se crea el SQl Command que sera el encargado de ejecutar la consulta, se le asocia la consulta y se ejecuta el datareader
                command = connection.CreateCommand();
                command.CommandType = CommandType.Text;
                command.CommandTimeout = 0;
                command.CommandText = sqlSentence;
                if (parameters != null && parameters.Count > 0)
                    AddParameters(parameters, dbType);
                dataReader = command.ExecuteReader();
                result = new ResultList(dataReader);
            }
            catch (Exception e)
            {
                result = null;
                throw new BusinessException(e).GetFaultException();
            }
            finally
            {
                if (dataReader != null && !dataReader.IsClosed)
                    dataReader.Close();
                if (connection != null && connection.State != System.Data.ConnectionState.Closed)
                    connection.Close();
            }
            return result;
        }

        private void AddParameters(List<SQLParameter> parameters, DBType type)
        {
            foreach (var item in parameters)
            {
                DbParameter param = command.CreateParameter();
                if (type == DBType.Oracle)
                    param.ParameterName = item.Name.Replace("@", "");
                else
                    param.ParameterName = item.Name;
                if (item.IsDate)
                {
                    param.DbType = DbType.Date;
                    if (item.DateValue != null)
                        param.Value = item.DateValue;
                    else
                        param.Value = GetDateValue(item.DefaultDateValue);
                }
                else if (item.IsInt)
                {
                    param.DbType = DbType.Int32;
                    param.Value = item.Int32Value;
                }
                else if (item.IsString)
                {
                    param.DbType = DbType.String;
                    param.Value = item.StringValue;
                }
                command.Parameters.Add(param);

            }
        }

        private DateTime GetDateValue(Int16? data)
        {
            if (data == 1)
            {
                //Hoy
                return new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
            }
            else if (data == 2)
            {
                //Ayer
                return new DateTime(DateTime.Now.AddDays(-1).Year, DateTime.Now.AddDays(-1).Month, DateTime.Now.AddDays(-1).Day);
            }
            else if (data == 3)
            {
                //Primer dia de la semana
                DateTime date = DateTime.Now;
                date = date.AddDays(1 - Convert.ToDouble(date.DayOfWeek));
                return new DateTime(date.Year, date.Month, date.Day);
            }
            else if (data == 4)
            {
                //Primer dia del mes
                return new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
            }
            else if (data == 5)
            {
                //Ultimo dia del mes
                return new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month));
            }
            else if (data == 6)
            {
                //Primer dia del mes anterior
                return new DateTime(DateTime.Now.AddMonths(-1).Year, DateTime.Now.AddMonths(-1).Month, 1);
            }
            else if (data == 7)
            {
                //Ultimo dia del mes anterior
                return new DateTime(DateTime.Now.AddMonths(-1).Year, DateTime.Now.AddMonths(-1).Month, DateTime.DaysInMonth(DateTime.Now.AddMonths(-1).Year, DateTime.Now.AddMonths(-1).Month));
            }
            else
                return new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
        }
    }
}