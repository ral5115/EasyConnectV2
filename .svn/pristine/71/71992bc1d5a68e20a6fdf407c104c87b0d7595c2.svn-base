using EasyTools.Domains.Base;
using EasyTools.Framework.Application;
using EasyTools.Framework.Data;
using EasyTools.Framework.Persistance;
using EasyTools.Framework.Resources;
using EasyTools.Infrastructure.Entities;
using System;

namespace EasyTools.Domains
{
   public class CONStructureDL : BaseCONStructureDL
   {
      private CONSQLDL cONSQLDl;

      private CONStructureAssociationDL cONStructureAssociationDl;

      private CONStructureDetailDL cONStructureDetailDl;

      public CONStructureDL(IUnitOfWork settings)
      : base(settings)
      {
      }

      public CONStructureDL(DatabaseSetting settings)
      : base(settings)
      {
      }

      public override CONStructure Execute(CONStructure data, Actions action, Options option, string token)
      {
         try
         {
            if (action == Actions.Add || action == Actions.Modify || action == Actions.Remove || (action == Actions.Find && (option == Options.Me || option == Options.Exist)))
            {
               if ((action == Actions.Add || action == Actions.Modify) && option == Options.All)
               {
                  this.Work.IsTransactional = true;
                  this.Work.BeginTransaction();
                  cONSQLDl = new CONSQLDL(Work);
                  cONStructureAssociationDl = new CONStructureAssociationDL(Work);
                  cONStructureDetailDl = new CONStructureDetailDL(Work);
               }
               data = base.Execute(data, action, option, token);
               if (action == Actions.Find && option == Options.Me)
               {
                  cONSQLDl = new CONSQLDL(this.Work.Settings);
                  cONStructureAssociationDl = new CONStructureAssociationDL(this.Work.Settings);
                  cONStructureDetailDl = new CONStructureDetailDL(this.Work.Settings);
                  data.SQLs = cONSQLDl.FindAll(new CONSQL { StructureId = data.Id });
                  data.MainStructures = cONStructureAssociationDl.FindAll(new CONStructureAssociation { MainStructureId = data.Id });
                  data.ChildStructures = cONStructureAssociationDl.FindAll(new CONStructureAssociation { ChildStructureId = data.Id });
                  data.StructureDetails = cONStructureDetailDl.FindAll(new CONStructureDetail { StructureId = data.Id });
               }
               if ((action == Actions.Add || action == Actions.Modify) && option == Options.All)
                  AddDetails(data);
               if (option == Options.All)
                  Work.Commit();
               return data;
            }
            else if (action == Actions.Find && (option == Options.All || option == Options.Light))
            {
               if (option == Options.All)
                  data.Entities = FindAll(data);
               else if (option == Options.Light)
                  data.Entities = FindLight(data);
               return data;
            }
            else
                throw new NotImplementedException(GetLocalizedMessage(Language.DLACTIONNOTIMPLEMENT, action.ToString(), option.ToString()));
         }
         catch (Exception e)
         {
            throw new BusinessException(e).GetFaultException();
         }
      }

      public void AddDetails(CONStructure data)
      {
         if (data.SQLs != null && data.SQLs.Count > 0)
         {
            for (int i = 0; i < data.SQLs.Count; i++)
            {
               data.SQLs[i].StructureId = data.Id;
               data.SQLs[i].LastUpdate = DateTime.Now;
               data.SQLs[i].UpdatedBy = data.UpdatedBy;
               if (data.SQLs[i].Company != null)
                  data.SQLs[i].CompanyId = data.SQLs[i].Company.Id;
               if (data.SQLs[i].MainSQL != null)
                  data.SQLs[i].MainSQLId = data.SQLs[i].MainSQL.Id;
               if (data.SQLs[i].Id == 0)
                  data.SQLs[i] = cONSQLDl.Add(data.SQLs[i]);
               else
                  data.SQLs[i] = cONSQLDl.Modify(data.SQLs[i]);
            }
         }
         if (data.MainStructures != null && data.MainStructures.Count > 0)
         {
            for (int i = 0; i < data.MainStructures.Count; i++)
            {
               data.MainStructures[i].MainStructureId = data.Id;
               data.MainStructures[i].LastUpdate = DateTime.Now;
               data.MainStructures[i].UpdatedBy = data.UpdatedBy;
               if (data.MainStructures[i].Id == 0)
                  data.MainStructures[i] = cONStructureAssociationDl.Add(data.MainStructures[i]);
               else
                  data.MainStructures[i] = cONStructureAssociationDl.Modify(data.MainStructures[i]);
            }
         }
         if (data.ChildStructures != null && data.ChildStructures.Count > 0)
         {
            for (int i = 0; i < data.ChildStructures.Count; i++)
            {
               data.ChildStructures[i].ChildStructureId = data.Id;
               data.ChildStructures[i].LastUpdate = DateTime.Now;
               data.ChildStructures[i].UpdatedBy = data.UpdatedBy;
               if (data.ChildStructures[i].Id == 0)
                  data.ChildStructures[i] = cONStructureAssociationDl.Add(data.ChildStructures[i]);
               else
                  data.ChildStructures[i] = cONStructureAssociationDl.Modify(data.ChildStructures[i]);
            }
         }
         if (data.StructureDetails != null && data.StructureDetails.Count > 0)
         {
            for (int i = 0; i < data.StructureDetails.Count; i++)
            {
               data.StructureDetails[i].StructureId = data.Id;
               data.StructureDetails[i].LastUpdate = DateTime.Now;
               data.StructureDetails[i].UpdatedBy = data.UpdatedBy;
               if (data.StructureDetails[i].Id == 0)
                  data.StructureDetails[i] = cONStructureDetailDl.Add(data.StructureDetails[i]);
               else
                  data.StructureDetails[i] = cONStructureDetailDl.Modify(data.StructureDetails[i]);
            }
         }
      }

      public override void CommonRules(CONStructure data)
      {
         base.CommonRules(data);
      }

      public override void AddRules(CONStructure data)
      {
         base.AddRules(data);
         data.LastUpdate = DateTime.Now;
      }

      public override void ModifyRules(CONStructure data)
      {
         base.ModifyRules(data);
         data.LastUpdate = DateTime.Now;
      }

      public override void RemoveRules(CONStructure data)
      {
         base.RemoveRules(data);
      }

      public override void FindByIdRules(CONStructure data)
      {
         base.FindByIdRules(data);
      }

   }
}
