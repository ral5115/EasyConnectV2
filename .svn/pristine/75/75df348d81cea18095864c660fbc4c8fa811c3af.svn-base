using EasyTools.Domains;
using EasyTools.Domains.Installation.Data;
using EasyTools.Framework.Application;
using EasyTools.Framework.Data;
using EasyTools.Infrastructure.Entities;
using EasyTools.Infrastructure.Entities.Base;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace EasyTools.UI.Data
{
    public class ToolsServiceClient
    {
        public Configuration GetConfiguration()
        {
            return EasyApp.Current.Configuration;
        }

        public SECUser Authentication(string email, string login, string password, string settingName)
        {
            DomainLogic dl = new DomainLogic(App.Current.Configuration.GetDatabaseSetting(settingName));
            return dl.GetSECUserDL().IsAuthenticate(email, login, password);
        }
        
        public void InstallLocalData()
        {
            Configuration conf = GetConfiguration();
            ENDefaultData defaultData = new ENDefaultData();
            try
            {
                DomainLogic dl = new DomainLogic(conf.DataBaseSettings[0]);
                if (defaultData.Roles() != null && defaultData.Roles().Count > 0)
                {
                    foreach (SECRole rol in defaultData.Roles())
                    {
                        SECRole data = dl.GetSECRoleDL().Add(rol);
                        if (rol.Users != null && rol.Users.Count > 0)
                            foreach (SECUser user in rol.Users)
                            {
                                user.Role = data;
                                user.RoleId = data.Id;
                                dl.GetSECUserDL().Add(user);
                            }
                    }
                }
                //if (defaultData.Languages() != null && defaultData.Languages().Count > 0)
                //{
                //    foreach (SECLanguage language in defaultData.Languages())
                //    {
                //        SECLanguage data = dl.GetSECLanguageDL().Add(language);
                //    }
                //}
                if (defaultData.Types() != null && defaultData.Types().Count > 0)
                {
                    foreach (SECType type in defaultData.Types())
                    {
                        SECType data = dl.GetSECTypeDL().Add(type);
                        if (type.TypeValues != null && type.TypeValues.Count > 0)
                            foreach (SECTypeValue typeValue in type.TypeValues)
                            {
                                typeValue.TypeId = type.Id;
                                SECTypeValue data1 = dl.GetSECTypeValueDL().Add(typeValue);
                                if (typeValue.TypeValueDetails != null && typeValue.TypeValueDetails.Count > 0)
                                    foreach (SECTypeValueDetail typeValueDetail in typeValue.TypeValueDetails)
                                    {
                                        typeValueDetail.TypeValueId = typeValue.Id;
                                        SECTypeValueDetail data2 = dl.GetSECTypeValueDetailDL().Add(typeValueDetail);
                                    }
                            }
                    }
                }
                if (defaultData.Companies() != null && defaultData.Companies().Count > 0)
                {
                    foreach (SECCompany company in defaultData.Companies())
                    {
                        SECCompany data = dl.GetSECCompanyDL().Add(company);
                    }
                }
                List<SECCompany> companies = dl.GetSECCompanyDL().FindAll(new SECCompany { Active = true });

                List<SECUser> users = dl.GetSECUserDL().FindAll(new SECUser { Active = true });
                SECUserCompany useCompany = new SECUserCompany { Active = true, CompanyId = companies[0].Id, UserId = users[0].Id, LastUpdate = DateTime.Now, UpdatedBy = "admin" };
                dl.GetSECUserCompanyDL().Add(useCompany);

            }
            catch (Exception e)
            {
                throw new BusinessException(e).GetFaultException();
            }
        }

        public BaseEntity Execute(BaseEntity data, Actions action, Options option, string settingName, string token)
        {
            DomainLogic dl = new DomainLogic(App.Current.Configuration.GetDatabaseSetting(settingName));
            if (data.GetType() == typeof(CONEquivalenceDetail))
                return dl.GetCONEquivalenceDetailDL().Execute((CONEquivalenceDetail)data, action, option, token);
            else if (data.GetType() == typeof(CONEquivalence))
                return dl.GetCONEquivalenceDL().Execute((CONEquivalence)data, action, option, token);
            else if (data.GetType() == typeof(CONError))
                return dl.GetCONErrorDL().Execute((CONError)data, action, option, token);
            else if (data.GetType() == typeof(CONIntegratorConfiguration))
                return dl.GetCONIntegratorConfigurationDL().Execute((CONIntegratorConfiguration)data, action, option, token);
            else if (data.GetType() == typeof(CONIntegrator))
                return dl.GetCONIntegratorDL().Execute((CONIntegrator)data, action, option, token);
            else if (data.GetType() == typeof(CONRecordDetail))
                return dl.GetCONRecordDetailDL().Execute((CONRecordDetail)data, action, option, token);
            else if (data.GetType() == typeof(CONRecord))
                return dl.GetCONRecordDL().Execute((CONRecord)data, action, option, token);
            else if (data.GetType() == typeof(CONSQLDetail))
                return dl.GetCONSQLDetailDL().Execute((CONSQLDetail)data, action, option, token);
            else if (data.GetType() == typeof(CONSQLParameter))
                return dl.GetCONSQLParameterDL().Execute((CONSQLParameter)data, action, option, token);
            else if (data.GetType() == typeof(CONSQL))
                return dl.GetCONSQLDL().Execute((CONSQL)data, action, option, token);
            else if (data.GetType() == typeof(CONSQLSend))
                return dl.GetCONSQLSendDL().Execute((CONSQLSend)data, action, option, token);
            else if (data.GetType() == typeof(CONStructureAssociation))
                return dl.GetCONStructureAssociationDL().Execute((CONStructureAssociation)data, action, option, token);
            else if (data.GetType() == typeof(CONStructureDetail))
                return dl.GetCONStructureDetailDL().Execute((CONStructureDetail)data, action, option, token);
            else if (data.GetType() == typeof(CONStructure))
                return dl.GetCONStructureDL().Execute((CONStructure)data, action, option, token);
            else if (data.GetType() == typeof(SECCompany))
                return dl.GetSECCompanyDL().Execute((SECCompany)data, action, option, token);
            else if (data.GetType() == typeof(SECConnection))
                return dl.GetSECConnectionDL().Execute((SECConnection)data, action, option, token);
            else if (data.GetType() == typeof(SECRolePermission))
                return dl.GetSECRolePermissionDL().Execute((SECRolePermission)data, action, option, token);
            else if (data.GetType() == typeof(SECRole))
                return dl.GetSECRoleDL().Execute((SECRole)data, action, option, token);
            else if (data.GetType() == typeof(SECType))
                return dl.GetSECTypeDL().Execute((SECType)data, action, option, token);
            else if (data.GetType() == typeof(SECTypeValueDetail))
                return dl.GetSECTypeValueDetailDL().Execute((SECTypeValueDetail)data, action, option, token);
            else if (data.GetType() == typeof(SECTypeValue))
                return dl.GetSECTypeValueDL().Execute((SECTypeValue)data, action, option, token);
            else if (data.GetType() == typeof(SECUserCompany))
                return dl.GetSECUserCompanyDL().Execute((SECUserCompany)data, action, option, token);
             else if (data.GetType() == typeof(SECUser))
                return dl.GetSECUserDL().Execute((SECUser)data, action, option, token);
            else if (data.GetType() == typeof(EXTFileOpera))
                return dl.GetEXTFileOperaDL().Execute((EXTFileOpera)data, action, option, token);
            else if (data.GetType() == typeof(EXTFileOperaDetail))
                return dl.GetEXTFileOperaDetailDL().Execute((EXTFileOperaDetail)data, action, option, token);
            else
                throw new NotImplementedException("La Acción " + action + " Con opción: " + option + " No esta Implementada");
        }

        public async Task<BaseEntity> ExecuteAsync(BaseEntity data, Actions action, Options option, string settingName, string token)
        {
            return await Task.Run(() =>
            {
                return Execute(data, action, option,settingName, token);
            });
        }

        

    }
}