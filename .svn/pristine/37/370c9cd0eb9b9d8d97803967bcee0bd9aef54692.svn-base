using EasyTools.Framework.Persistance;
using EasyTools.Infrastructure.Entities;
using EasyTools.Infrastructure.Repositories.Base;
using NHibernate;
using System;

namespace EasyTools.Infrastructure.Repositories
{

    public class CONRecordRepository : BaseCONRecordRepository
    {

        public CONRecordRepository(IUnitOfWork context)
            : base(context)
        {
        }

        public override String GetQuery(CONRecord data, Boolean byId)
        {
            String dml = base.GetQuery(data, byId);
            if (byId)
            {
                //add more parameters to method for query by id
                if (!String.IsNullOrWhiteSpace(data.LogicalKey))
                    dml += "             AND upper(a.LogicalKey) = :LogicalKey \n";
            }
            else
            {
                //Determine if the boolean values ​​are taken included as part of the consultation
                //dml += "             AND a.IsSend = :IsSend \n" ;
                //dml += "             AND a.IsExternal = :IsExternal \n" ;

                //add more parameters to method for query by any field

                if (data.SQL != null && data.SQL.Id != 0)
                    dml += "             AND a.SQL.Id = :SQL \n";

                dml += " order by a.Id asc ";
            }
            return dml;
        }

        public override void SetQueryParameters(IQuery query, CONRecord data, Boolean byId)
        {
            base.SetQueryParameters(query, data, byId);
            if (byId)
            {
                //add more parameters to method for query by id
                if (!String.IsNullOrWhiteSpace(data.LogicalKey))
                    query.SetString("LogicalKey", data.LogicalKey.ToUpper());
            }
            else
            {

                //Determine if the boolean values ​​are taken included as part of the consultation
                //query.SetBoolean("IsSend",  data.IsSend);
                //query.SetBoolean("IsExternal",  data.IsExternal);

                //add more parameters to method for query by any field

                if (data.SQL != null && data.SQL.Id != 0)
                    query.SetInt32("SQL", data.SQL.Id);
            }
        }

    }
}