using EasyTools.Domains.Base;
using EasyTools.Framework.Application;
using EasyTools.Framework.Data;
using EasyTools.Framework.Persistance;
using EasyTools.Framework.Resources;
using EasyTools.Infrastructure.Entities;
using System;

namespace EasyTools.Domains
{
   public class CONStructureAssociationDL : BaseCONStructureAssociationDL
   {
      public CONStructureAssociationDL(IUnitOfWork settings)
      : base(settings)
      {
      }

      public CONStructureAssociationDL(DatabaseSetting settings)
      : base(settings)
      {
      }

      public override CONStructureAssociation Execute(CONStructureAssociation data, Actions action, Options option, string token)
      {
         try
         {
            if (action == Actions.Add || action == Actions.Modify || action == Actions.Remove || (action == Actions.Find && (option == Options.Me || option == Options.Exist)))
            {
               if ((action == Actions.Add || action == Actions.Modify) && option == Options.All)
               {
                  this.Work.IsTransactional = true;
                  this.Work.BeginTransaction();
               }
               data = base.Execute(data, action, option, token);
               if (action == Actions.Find && option == Options.Me)
               {
               }
               if ((action == Actions.Add || action == Actions.Modify) && option == Options.All)
                  AddDetails(data);
               if (option == Options.All)
                  Work.Commit();
               return data;
            }
            else if (action == Actions.Find && (option == Options.All || option == Options.Light))
            {
               if (option == Options.All)
                  data.Entities = FindAll(data);
               else if (option == Options.Light)
                  data.Entities = FindLight(data);
               return data;
            }
            else
                throw new NotImplementedException(GetLocalizedMessage(Language.DLACTIONNOTIMPLEMENT, action.ToString(), option.ToString()));
         }
         catch (Exception e)
         {
            throw new BusinessException(e).GetFaultException();
         }
      }

      public void AddDetails(CONStructureAssociation data)
      {
      }

      public override void CommonRules(CONStructureAssociation data)
      {
         base.CommonRules(data);
      }

      public override void AddRules(CONStructureAssociation data)
      {
         base.AddRules(data);
         data.LastUpdate = DateTime.Now;
      }

      public override void ModifyRules(CONStructureAssociation data)
      {
         base.ModifyRules(data);
         data.LastUpdate = DateTime.Now;
      }

      public override void RemoveRules(CONStructureAssociation data)
      {
         base.RemoveRules(data);
      }

      public override void FindByIdRules(CONStructureAssociation data)
      {
         base.FindByIdRules(data);
      }

   }
}
